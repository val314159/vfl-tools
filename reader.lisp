(in-package :vfl-tools)
(defun normal ()
  (set-mchar #\¶ λ(^))
  (set-mchar VT  λ(^))
  (set-mchar TB  λ(^))
  (set-mchar FF  λ(^))
  (set-mchar SP  λ(^))
  (set-mchar CR  λ(^))
  (set-mchar NL  λ(n (snl $1 $2) (^)))
  (set-mchar #\( λ(read-dlist #\) $1))
  (set-mchar #\< λ(read-dlist #\> $1))
  (set-mchar #\{ λ(read-dlist #\} $1))
  (set-mchar #\[ λ(read-dlist #\] $1))
  (set-mchar #\) λ(error ")"))
  (set-mchar #\> λ(error ">"))
  (set-mchar #\] λ(error "]"))
  (set-mchar #\} λ(error "}")))
(defun infixed (x)
  (ecase (length x)
    (0  (list '^))
    (1  (:0 x))
    (2  (if (eq (:1 x) '|,|)
	    (list (:1 x) (:0 x))
	    (list (:0 x) (:1 x))))
    (3  (list (:1 x) (:0 x) (:2 x)))
    (4  (list (:1 x) (:0 x) (:2 x)))
    (5  (list (:1 x) (:0 x) (:2 x) (:4 x)))
    (6  (list (:1 x) (:0 x) (:2 x) (:4 x)))
    (7  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x)))
    (8  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x)))
    (9  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x) (:8 x)))))
(defun extended ()
  (set-mchar #\¶ λ(^))
  (set-mchar VT  λ(^))
  (set-mchar TB  λ(^))
  (set-mchar FF  λ(^))
  (set-mchar SP  λ(^))
  (set-mchar CR  λ(^))
  (set-mchar NL  λ(n (snl $1 $2) (^)))
  (set-mchar NL  'read-nl)
  (set-mchar #\( λ(infixed (read-dlist #\) $1)))
  (set-mchar #\< λ(read-dlist #\> $1))
  (set-mchar #\{ λ(read-dlist #\} $1))
  (set-mchar #\[ λ(read-dlist #\] $1))
  (set-mchar #\) λ(error ")"))
  (set-mchar #\> λ(error ">"))
  (set-mchar #\] λ(error "]"))
  (set-mchar #\} λ(error "}")))
