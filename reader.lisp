(in-package :vfl-tools)
(defun normal ()
  (set-mchar #\: nil)
  (set-mchar #\§ nil)
  (set-mchar #\¶ λ(^))
  (set-mchar VT  λ(^))
  (set-mchar TB  λ(^))
  (set-mchar FF  λ(^))
  (set-mchar SP  λ(^))
  (set-mchar CR  λ(^))
  (set-mchar NL  λ(n (snl $1 $2) (^)))
  (set-mchar #\( λ(read-dlist #\) $1))
  (set-mchar #\< λ(read-dlist #\> $1))
  (set-mchar #\{ λ(read-dlist #\} $1))
  (set-mchar #\[ λ(read-dlist #\] $1))
  (set-mchar #\) λ(error ")"))
  (set-mchar #\> λ(error ">"))
  (set-mchar #\] λ(error "]"))
  (set-mchar #\} λ(error "}")))
(defun extended ()
  (set-mchar #\: λ(n (read-ws s)
		     (read-xll s (off s))))
  (set-mchar #\§ λ(n (close $1) (^)))
  (set-mchar #\¶ λ(^))
  (set-mchar VT  λ(^))
  (set-mchar TB  λ(^))
  (set-mchar FF  λ(^))
  (set-mchar SP  λ(^))
  (set-mchar CR  λ(^))
  (set-mchar NL  λ(n (snl $1 $2) (^)))
  (set-mchar NL  'read-nl)
  (set-mchar #\( λ(infixed (read-dlist #\) $1)))
  (set-mchar #\< λ(read-dlist #\> $1))
  (set-mchar #\{ λ(read-dlist #\} $1))
  (set-mchar #\[ λ(read-dlist #\] $1))
  (set-mchar #\) λ(error ")"))
  (set-mchar #\> λ(error ">"))
  (set-mchar #\] λ(error "]"))
  (set-mchar #\} λ(error "}")))
