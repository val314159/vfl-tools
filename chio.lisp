(in-package :vfl-tools)
(defconstant   VT #\Vt)
(defconstant   TB #\Tab)
(defconstant   FF #\Page)
(defconstant   SP #\Space)
(defconstant   CR #\Return)
(defconstant   NL #\Newline)
(defparameter  WC '(VT TB FF SP CR))
(defparameter  WS (cons NL WC))
(defparameter EOS '(#\¶ #\§ #\) #\] #\} #\> nil))
(defparameter EOL (cons NL EOS))
(defvar *nl-pos*)
(defun infixed (x)
  (ecase (length x)
    (0  (list '^))
    (1  (:0 x))
    (2  (if (eq (:1 x) '|,|)
	    (list (:1 x) (:0 x))
	    (list (:0 x) (:1 x))))
    (3  (list (:1 x) (:0 x) (:2 x)))
    (4  (list (:1 x) (:0 x) (:2 x)))
    (5  (list (:1 x) (:0 x) (:2 x) (:4 x)))
    (6  (list (:1 x) (:0 x) (:2 x) (:4 x)))
    (7  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x)))
    (8  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x)))
    (9  (list (:1 x) (:0 x) (:2 x) (:4 x) (:6 x) (:8 x)))))
(defun    f. (f &rest r) (apply #'format  t  f r) (terpri) nil)
(defun    f- (f &rest r) (apply #'format  t  f r))
(defun    s- (f &rest r) (apply #'format nil f r))
(defun    p. (x) (prin1 x) (terpri)    x)
(defun    p- (x) (prin1 x) (princ " ") x)
(defun   snl (s c) (? ((eq c NL) (setf *nl-pos* (p s)))) c)
(defun   off (s) (- (p s) *nl-pos*))
(defun peekc (s &optional  b)           (peek-char nil s b))
(defun readc (s &optional (b t)) (snl s (read-char     s b)))
(defun readr (s &optional (b t)) (read-preserving-whitespace s b))
(defun  wc-p (c) (member c  WC))
(defun  ws-p (c) (member c  WS))
(defun eos-p (c) (member c EOS))
(defun eol-p (c) (member c EOL))
(defun sym-p (c) (mv-bind (a b) (get-mchar c) (? (a b) (t t))))
(defun read-ws (s) (? ((member (peekc s) WS) (cons (readc s) (read-ws s)))))
(defun read-wc (s) (? ((member (peekc s) WC) (cons (readc s) (read-wc s)))))
(defun peek-wc (s) (read-wc s) (peekc s))
(defun read-xl (s)
  (? ((eol-p (peek-wc s)) (values))
     (t (cons (readr s) (read-xl s)))))
(defun read-xll (s x)
  (? ((eos-p (peek-wc s)) (values))
     (t (read-ws s)
	(let*                          (y (mv-list (read-xl  s)))
	  (read-wc s)
	  (^^ (? ((= (off s) x) (append y (mv-list (read-xll s x))))
		 (t             y)))))))
(defun read-nl (s c)
  (snl s c)
  (let* ((d (peek-wc s)))
    (? ((member d EOL) (values))
       (t (read-xll s (off s))))))
(defun read-dlist (c s)
  (? ((eq (peek-wc s) c) (n (readc s) nil))
     (t (cons (readr s) (read-dlist c s)))))
