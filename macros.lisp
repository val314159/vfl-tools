(in-package :vfl-tools)
(cl:defmacro q         (cl:&rest r)  (cons (quote quote)    r))
(cl:defmacro |,|       (cl:&rest r)                         r )
(cl:defmacro ?         (cl:&rest r) `(cl:cond             ,@r))
(cl:defmacro ^         (cl:&rest r) `(cl:values           ,@r))
(cl:defmacro a         (cl:&rest r) `(cl:apply            ,@r))
(cl:defmacro c         (cl:&rest r) `(cl:funcall          ,@r))
(cl:defmacro n         (cl:&rest r) `(cl:progn            ,@r))
(cl:defmacro p         (cl:&rest r) `(cl:file-position    ,@r))
(cl:defmacro v         (cl:&rest r) `(vector              ,@r))
(cl:defmacro cat       (cl:&rest r) `(cl:concatenate      ,@r))
(cl:defmacro cs        (cl:&rest r) `(cat (q cl:string)   ,@r))
(cl:defmacro   mv-bind (cl:&rest r) `(multiple-value-bind ,@r))
(cl:defmacro   mv-call (cl:&rest r) `(multiple-value-call ,@r))
(cl:defmacro   mv-list (cl:&rest r) `(multiple-value-list ,@r))
(cl:defmacro   mv-setq (cl:&rest r) `(multiple-value-setq ,@r))
(cl:defmacro set-mchar (cl:&rest r) `(set-macro-character ,@r))
(cl:defun    get-mchar (r)  (cl:if r (get-macro-character   r)))
(set-macro-character
 #\Î» (lambda (s c)
       (declare (ignorable s c))
       `(lambda    (&optional $1 $2 $3 $4 $5 $6 $7 $8 $9)
	  (declare (ignorable $1 $2 $3 $4 $5 $6 $7 $8 $9))
	  ,(read-preserving-whitespace s))))
